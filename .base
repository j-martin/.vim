#!/usr/bin/env bash

__source() {
  local sourced_file="$1"
  shift

  # shellcheck disable=1090
  if [[ -f "${sourced_file}" ]]; then
    source "${sourced_file}"
  fi
}

export WORK="$HOME/code/alloy"
export GOPATH="$HOME/code/go"
export GOWORK="$GOPATH/src/github.com/alloytech/"

export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export CDPATH=".:$HOME:$HOME/code/j-martin:$WORK:$GOWORK:$GOPATH/src/github.com/j-martin/:$HOME/code/"
export VISUAL="emacsclient"

GPG_TTY="$(tty)"
export GPG_TTY

__source "$HOME/.cargo/env"
export PATH="$HOME/.cargo/bin:$PATH"

# Use /usr/bin/ssh-add -K ~/.ssh/* to add existing keys
test -e "$TMPDIR/ssh-loaded" \
  || /usr/bin/ssh-add -A && touch "$TMPDIR/ssh-loaded"

__encfs() {
  local root_dir="$1"
  local mount_point="$2"
  local mount_file="${mount_point}/.mounted"
  if [[ ! -f "${mount_file}" ]]; then
    echo "Mounting: ${mount_point}"
    encfs "${root_dir}" "${mount_point}" \
      && touch "${mount_file}" \
      || (echo 'Failed to mount encrypted volume... Retrying' && __encfs "$@")
  fi
}

__source "/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.zsh.inc"
__source "/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/completion.zsh.inc"

# __encfs "$HOME/Sync/Storage" "$HOME/.storage"

__source "$HOME/.private/profile"

# shellcheck source=.functions/all
source "$HOME/.functions/all"
# shellcheck source=.aliases
source "$HOME/.aliases"

export PATH="$GOPATH/bin:/usr/local/sbin:$HOME/.npm/bin:/usr/local/bin:$HOME/.bin:$HOME/.local/bin:$PATH"

test -e /usr/libexec/java_home \
  && export JAVA_HOME="$(/usr/libexec/java_home -v 14 2> /dev/null || true)"
test -e /usr/local/bin/nvim \
  && export EDITOR='/usr/local/bin/nvim'

export PAGER='less -SRi'
export HOSTNAME="$HOST"

export RIPGREP_CONFIG_PATH="$HOME/.config/ripgrep"
export FZF_DEFAULT_COMMAND='rg --files 2> /dev/null'

export SDKMAN_DIR="$HOME/.sdkman"
__source "$HOME/.sdkman/bin/sdkman-init.sh"

if [[ -z "$DISPLAY" ]] && [[ -n "$XDG_VTNR" ]] && [[ "$XDG_VTNR" -eq 1 ]]; then
  exec startx
fi

if [[ -n "$(pgrep gpg-agent)" ]]; then
  export GPG_AGENT_INFO
else
  # shellcheck disable=SC2046
  eval $(gpg-agent --daemon)
fi

# Work
export PYENV_ROOT="$HOME/.pyenv"
export PATH="${PYENV_ROOT}/shims:${PATH}"
